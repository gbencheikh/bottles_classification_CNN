
Image Capture and Processing Script Documentation
This documentation provides an overview of the purpose, dependencies, usage, and recommendations for the provided code.

1. Purpose:
The purpose of this script is to capture a generate number of images from the live video feed of a machine camera, only a zoom of the centered rectangular region of interest (ROI) within the frame is captured and saved. 
The captured images are saved to the specified output folder.

2. Dependencies:
PIL (Python Imaging Library): Used for working with images.
cv2 (OpenCV): Used for capturing video frames, image processing, and display.
os: Used for file and folder operations.
time: Used for timestamping the captured images.

3. Function:
generateImage(nbrImages, output_folder):
Inputs:
nbrImages: Number of images to capture.
output_folder: The folder where the captured images will be saved.
Process:
Opens a video capture object to access the webcam (cv2.VideoCapture).
Enters a loop to capture the specified number of images.
Draws a green rectangle on the video frame, which represents the region of interest (ROI).
Captures the rectangular region from the frame and saves it as an image.
Timestamps each image with the current time.
Displays the frame with the drawn rectangle.
Exits the loop if the 'q' key is pressed.
Outputs:
Saves specified number of images to the specified output folder. 

4. Usage (Example):
For example if you want to capture 10 images and save them in a folder called "DataTest" folder, call generateImage(10, "DataTest").

5. Note:
The script creates the "DataTest" folder if it doesn't exist.
Images are saved with filenames containing a timestamp and a counter for uniqueness.

7. Recommendations:
Ensure that the necessary dependencies (PIL, cv2, cvzone, os, time) are installed.
Make sure the webcam is connected and accessible.
Modify the script according to specific requirements (e.g., adjust the size of the ROI, change the output folder, change number of generated images).

8. Future Improvements:
Add error handling for better robustness.
Provide more customization options for users (e.g., ROI size, file naming convention).
